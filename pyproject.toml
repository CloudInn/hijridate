[build-system]
requires = ["hatchling", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[project]
name = "hijridate"
authors = [
    { name = "Mohammed Alshehri", email = "" },
]
license = "MIT"
requires-python = ">=3.8"
description = "Accurate Hijri-Gregorian dates converter based on the Umm al-Qura calendar"
keywords = [
    "calendar",
    "converter",
    "date",
    "gregorian",
    "hijri",
    "saudi",
    "ummalqura",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Legal Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: Arabic",
    "Natural Language :: Bengali",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Internationalization",
    "Topic :: Software Development :: Localization",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dynamic = [
    "version",
    "readme",
]

[project.urls]
Documentation = "https://hijridate.readthedocs.io"
Changelog = "https://github.com/dralshehri/hijridate/blob/main/CHANGELOG.md"
Source = "https://github.com/dralshehri/hijridate"

[tool.hatch.version]
path = "src/hijridate/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/hijridate"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "CHANGELOG.md",
    "README.md",
]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
fragments = [
    { path = "README.md" },
]
substitutions = [
    { pattern = "<!-- start badges -->[\\S\\s]+<!-- end badges -->\n+", replacement = "" },
    { pattern = "<!--[\\s\\w]+-->\n+", replacement = "" },
]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "coverage",
]

[tool.hatch.envs.default.scripts]
cov-tests = "coverage run -m pytest tests"
cov-report = [
    # leading hyphen is to ignore the exit code
    "- coverage combine",
    "- coverage report",
    "coverage html",
]
tests = [
    "hatch run all:cov-tests",
    "hatch run cov-report",
]
checks = [
    "hatch run quality:types",
    "hatch run quality:format",
    "hatch run quality:lint --fix",
]
docs = "hatch run docs:build"

[[tool.hatch.envs.all.matrix]]
python = [
    "3.8",
    "3.9",
    "3.10",
    "3.11",
    "3.12",
]

[tool.hatch.envs.quality]
dependencies = [
    "pyright",
    "ruff",
]

[tool.hatch.envs.quality.scripts]
types = "pyright"
lint = "ruff check {args}"
lint-all = "ruff check --select=ALL --ignore=D105,D107,ANN,COM,S,CPY,EXE,FA,INP,SLF"
format = "ruff format {args}"

[tool.hatch.envs.docs]
dependencies = [
    "sphinx",
    "sphinx-notfound-page",
    "myst-parser",
    "furo",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -E docs docs/_build"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--import-mode=importlib",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
]
testpaths = ["tests/unit"]

[tool.coverage.run]
source_pkgs = ["hijridate"]
branch = true
parallel = true

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]
fail_under = 100
show_missing = true

[tool.pyright]
include = ["src"]
pythonVersion = "3.8"
pythonPlatform = "All"
typeCheckingMode = "strict"

[tool.ruff]
line-length = 88
indent-width = 4
src = ["src"]

[tool.ruff.lint]
select = [
    "F", # pyflakes
    "E", # pycodestyle error
    "W", # pycodestyle warning
    "I", # isort
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "EM", # flake8-errmsg
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "PL", # pylint
    "RUF", # Ruff-specific rules
]
ignore = [
    "D105", # undocumented-magic-method, not required
    "D107", # undocumented-public-init, not required
]

ignore-init-module-imports = true
pydocstyle = { convention = "google" }
isort = { combine-as-imports = true, lines-between-types = 1 }

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D10", # Missing docstrings
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = 72
