name: Code Checks

on:
  workflow_call:
  push:
    branches-ignore:
      - 'releases/**'
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  analysis:
    name: Static analysis
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        id: cache
        with:
          path: '~/.cache/pip'
          key: "${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}"
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Hatch
        run: |
          python -m pip install --upgrade pip
          pip install hatch

      - name: Check typing
        run: hatch run tools:type-check

      - name: Check linting
        run: hatch run tools:lint

      - name: Check format
        run: hatch run tools:format --check

  tests:
    name: Tests on Python ${{ matrix.python-version }}
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        id: cache
        with:
          path: ~/.cache/pip
          key: "${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}"
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Hatch
        run: |
          python -m pip install --upgrade pip
          pip install hatch

      - name: Run tests with coverage
        run: hatch run cov-tests

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: 'coverage-data-${{ matrix.python-version }}'
          path: '.coverage.*'

  coverage:
    name: Code coverage
    if: ${{ !cancelled() }}
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        id: cache
        with:
          path: ~/.cache/pip
          key: "${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}"
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Hatch
        run: |
          python -m pip install --upgrade pip
          pip install hatch

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: 'coverage-data-*'
          merge-multiple: true

      - name: Generate coverage report
        run: hatch run cov-report

      - name: Print coverage report
        run: hatch run coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

      - name: Upload the HTML report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: htmlcov

      - name: Clean up coverage data
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const run_id = context.runId
            try {
              const res = await github.rest.actions.listWorkflowRunArtifacts({
                owner,
                repo,
                run_id,
              });
              const artifactIds = res.data.artifacts
                .filter(artifact => artifact.name.startsWith('coverage-data-'))
                .map(artifact => artifact.id)
              for (const artifact_id of artifactIds) {
                await github.rest.actions.deleteArtifact({
                  owner,
                  repo,
                  artifact_id,
                });
              }
            } catch (error) {
              core.setFailed(error.message);
            }
