name: Draft Preparation

on:
  push:
    tags:
      - 'v*'

jobs:
  validation:
    name: Version validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get release info
        run: |
          echo "GIT_VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          echo "PY_VERSION=$(grep '__version__' $(find src -name '_version.py') | awk -F '"' '{print $2}')" >> $GITHUB_ENV
          echo "MD_VERSION=$(grep -m 1 '##' CHANGELOG.md | awk -F ' ' '{print $2}')" >> $GITHUB_ENV
          echo "GIT_DATE=$(git show -s --format=%cs $GITHUB_REF_NAME)" >> $GITHUB_ENV
          echo "MD_DATE=$(grep -m 1 '##' CHANGELOG.md | awk -F ' - ' '{print $2}')" >> $GITHUB_ENV

      - name: Validate git and py versions
        run: |
          [[ "$GIT_VERSION" == "$PY_VERSION" ]] || exit 1

      - name: Validate git and md versions
        run: |
          [[ "$GIT_VERSION" == "$MD_VERSION" ]] || exit 1

      - name: Validate git and md dates
        run: |
          [[ "$GIT_DATE" == "$MD_DATE" ]] || exit 1

  draft:
    name: Draft preparation
    needs: validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare release title
        run: |
          echo "RELEASE_TITLE=$(grep -m 1 '^# ' README.md | cut -c3-) ${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Prepare release content
        run: |
          {
            echo 'RELEASE_CONTENT<<EOF'
            cat CHANGELOG.md |
            sed -n '/^## '"${GITHUB_REF_NAME#v}"'/,/^## /p' |
            sed '1,2d;$d' |
            sed '1i ## What'\''s Changed\n' |
            sed -r 's/\[([^\[]+)\]\(([^)]*github.com[^)]+)\)/\1/g'
            echo EOF
          } >> "$GITHUB_ENV"

      - name: Create draft release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: process.env.GITHUB_REF_NAME,
                name: process.env.RELEASE_TITLE,
                body: process.env.RELEASE_CONTENT,
                draft: true,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
